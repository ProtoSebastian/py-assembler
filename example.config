[Options]
; options

; `<setting> <value>`
; size of a word, in bits
word_size 8
; max length an instruction can have, in words
instruction_max_length 4
; size of ROM
rom_size 1M
; ROM offset
rom_offset 0x00000
; padding word
padding_word 0x00

[Operands]
; define operands and their names

; `opcode [<word index>, <position in word>:<length in bits>]`
;| word 0 | word 1 | word 2 | word 3 |
;|00000000|00000000|00000000|00000000|
; ^^^^                                
opcode [0, 4:4]

; `<signed or unsigned> <1-char name>, [<word index>, <position in word>:<length in bits>], <type flags>, "<full name>"`
;| word 0 | word 1 | word 2 | word 3 |
;|00000000|00000000|00000000|00000000|
;        [%EEEE    [CCCCCCCC-CCCCCCCC]
;           %AAAA   BBBBBBBB          
;             %DDDD]                  
unsigned A [1, 2:4],  0b0000010, "Register"
signed   B [2, 0:8],  0b0000001, "Immediate"
unsigned C [3, 0:16], 0b0110101, "Address immediate"
unsigned D [1, 0:4],  0b0100110, "Address register L"
unsigned E [1, 4:4],  0b0010110, "Address register H"

[Instructions]
; define instructions
; mostly just automates repetitive work

; `<mnemonic> <opcode>, <operands>, <OR'd constant>, <size in words>`
ex1 0x0A, ABC, 0x0080, 2

[Macros]
; define macros

; `<label> <operands>, "<resolution as formatted string>"`
ex_macro1 ABC, "ex2 %{0}, {1}, [{2}]"
ex_macro2 ADC, "ex1 {0}, {2}, {1}"
ex_macro3 AE,  "ex3 {1}, %AX, {0}"

[Symbols]

; `<symbol> <resolution> [<type flags>]`
; [] = optional
ZX 0
AX 1
BX 2, 0x80
CX 3
